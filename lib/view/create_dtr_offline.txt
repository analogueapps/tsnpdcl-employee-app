
//Physical loaction ->spm
private String[] spmArray = new String[]{

            "SELECT",
            "AE/SPM/Khammam",
            "AE/SPM/Tallada",
            "AE/SPM/Kothagudem",
            "AE/SPM/Bhadrachalam",
            "AE/SPM/Hanamkonda",
            "AE/SPM/Warangal",
            "AE/SPM &TRE/Bhupalpally",
            "AE/SPM/Mulugu",
            "AE/CTM &LTM/WGL Rural",
            "AE/LTM &CTM/Mahabubabad",
            "AE/SPM &TRE/WGL Rural",
            "AE/SPM/Mahabubabad",
            "AE/SPM/Thorrur",
            "AE/SPM/Jangaon",
            "AE/SPM/Ghanpur",
            "AE/SPM/Karimnagar",
            "AE/SPM/Huzurabad",
            "AE/SPM/Jagtial",
            "AE/SPM/Metpally",
            "AE/SPM/Pedpapally",
            "AE/SPM/Manthani",
            "AE/SPM/Nizamabad",
            "AE/SPM/Armoor",
            "AE/SPM/Kamareddy",
            "AE/SPM/Banswada",
            "AE/SPM/Nirmal",
            "AE/SPM/Bhainsa",
            "AE/SPM/Mancherial",
            "AE/SPM &TRE/Asifabad",
            "AE/SPM/Adilabad"
    };

//for store
 private String[] storesArray = new String[]{"SELECT","KHAMMAM-STORE","WARANGAL-STORE", "KARIMNAGAR STORE","NIZAMABAD-STORE","ADILABAD-STORE","MANCHERIAL-STORE"};

 spinner_structure_type.setAdapter(new ArrayAdapter<String>(context,android.R.layout.simple_dropdown_item_1line,new String[]{"Select","Single Pole","Double Pole"}));
         spinner_plinth_type.setAdapter(new ArrayAdapter<String>(context,android.R.layout.simple_dropdown_item_1line,new String[]{"Select","Mounting Arrangements","Rings","Rock Plinth","Pillar Type"}));
         spinner_ab_switch.setAdapter(new ArrayAdapter<String>(context,android.R.layout.simple_dropdown_item_1line,new String[]{"Select","Horizontal","Vertical","Not Available"}));
         spinner_hg_fuse_sets.setAdapter(new ArrayAdapter<String>(context,android.R.layout.simple_dropdown_item_1line,new String[]{"Select","Horizontal","Vertical","Not Available"}));
         spinner_lt_fuse_sets.setAdapter(new ArrayAdapter<String>(context,android.R.layout.simple_dropdown_item_1line,new String[]{"Select","Available and Ok","Available but Parallel","Not Available"}));
         spinner_lt_fuse_type.setAdapter(new ArrayAdapter<String>(context,android.R.layout.simple_dropdown_item_1line,new String[]{"Select","Not Available","Distribution Box","LT Fuse Set"}));
         spinner_load_pattern.setAdapter(new ArrayAdapter<String>(context,android.R.layout.simple_dropdown_item_1line,new String[]{"Select","Idle","Dedicated PWS","Dedicated LI","Dedicated Industrial","Dedicated Agl Without PWS","HT Service","Appartment","Dedicated Agl with PWS","Mixed Agl With PWS","Mixed Agl without PWS","Mixed Load","Pure Domestic","Pure Non Domestic","Mixed without AGL","Substation DTR "}));


         //save
         private void saveDtrStructure(boolean replace) {

                 final ApptrolsProgressDialog apptrolsProgressDialog = new ApptrolsProgressDialog();
                 apptrolsProgressDialog.setProgressText("Uploading Image's....");
                 apptrolsProgressDialog.displayDialog(getSupportFragmentManager());
                 JSONObject structure = new JSONObject();
                     new Thread(new Runnable() {
                         @Override
                         public void run() {

                             try {
                                 structure.put("replace",replace);
                             if (checkBox_structure.isChecked()||checkBox_ss.isChecked()) {
                                 structure.put("structureCode", et_sap_structure_code.getText().toString());
                                 structure.put("abSwitch", spinner_ab_switch.getSelectedItem() + "");
                                 structure.put("capacity", ((Option) spinner_capacity.getSelectedItem()).getOptionName() + "");
                                 structure.put("landMark", et_landmark.getText().toString());


                                 structure.put("distributionCode", ((Option) spinner_distribution.getSelectedItem()).getOptionCode());
                                 structure.put("distribution", ((Option) spinner_distribution.getSelectedItem()).getOptionName());
                                 structure.put("structureType", spinner_structure_type.getSelectedItem() + "");

                                 structure.put("feederCode", (checkBox_ss.isChecked())?"NA":((Option) spinner_ss11kv.getSelectedItem()).getOptionCode());
                                 structure.put("feederName", (checkBox_ss.isChecked())?"NA":((Option) spinner_ss11kv.getSelectedItem()).getOptionName());
                                 structure.put("hgFuseSet", spinner_hg_fuse_sets.getSelectedItem() + "");
                                 structure.put("lat", location.getLatitude());
                                 structure.put("lon", location.getLongitude());

                                 structure.put("loadPattern", spinner_load_pattern.getSelectedItem() + "");
                                 structure.put("ltFuseSet", spinner_lt_fuse_sets.getSelectedItem() + "");
                                 structure.put("ltFuseType", spinner_lt_fuse_type.getSelectedItem() + "");
                                 structure.put("plinthType", spinner_plinth_type.getSelectedItem() + "");
                                 structure.put("ssCode", ((Option) spinner_ss33kv.getSelectedItem()).getOptionCode());
                                 structure.put("ssName", ((Option) spinner_ss33kv.getSelectedItem()).getOptionName());
                                 structure.put("ssNo", "SS-" +((checkBox_ss.isChecked())?"NA": (spinner_dtr_strut.getSelectedItem()+"")));
                             }
                             JSONArray dtrs=new JSONArray();
                             for (int i=0;i<list.size();i++){
                                 JSONObject dtr = new JSONObject();
                                 DTR d= list.get(i);
                                 FileUploaderWithToken fileUploaderWithToken = new FileUploaderWithToken(context, ApiServices.IMAGE_UPLOAD_URL, d.getImageUrl(), LoginSdk.getInsatnce().getToken(context), LoginSdk.getInsatnce().getApiKey(context), "");
                                 RxdResponse rxdResponse=fileUploaderWithToken.UploadFile();
                                 if (rxdResponse==null||rxdResponse.getMessage()==null){
                                     apptrolsProgressDialog.close();;
                                     InfoDialog infoDialog = InfoDialog.newInstance("Failed to upload image, Please try again");
                                     infoDialog.displayDialog(getSupportFragmentManager());
                                     return;
                                 }
                                 if (!rxdResponse.isSuccess()){
                                     apptrolsProgressDialog.close();;
                                     InfoDialog infoDialog = InfoDialog.newInstance(rxdResponse.getMessage());
                                     infoDialog.displayDialog(getSupportFragmentManager());
                                     return;
                                 }
                                 dtr.put("capacity",d.getCapacity());
                                 if (checkBox_spm.isChecked())
                                 {
                                     dtr.put("spmfl",((Option)spinner_spm_shed.getSelectedItem()).getOptionCode());
                                 }
                                 dtr.put("make",d.getMake());
                                 dtr.put("makeVendorId",d.getMakeVendorId());
                                 dtr.put("locationType",checkBox_structure.isChecked()?"STRUCTURE":checkBox_spm.isChecked()?"SPM":checkBox_ss.isChecked()?"SUBSTATION":"STORE");
                                 dtr.put("physicalLocationAddress",checkBox_structure.isChecked()?"STRUCTURE":spinner_dtr_location.getSelectedItem().toString());
                                 dtr.put("url",rxdResponse.getMessage());
                                 dtr.put("phase",d.getPhase());
                                 dtr.put("meterPhase",d.getMeterPhase());
                                 dtr.put("chargeDate",d.getDtrChargeDate());
                                 dtr.put("appVersion",BuildConfig.VERSION_CODE+"");
                                 dtr.put("ratio",d.getRatio());
                                 dtr.put("equipmentCode",d.getSapEquipmentNo());
                                 dtr.put("slno",d.getSerialNo());
                                 dtr.put("year",d.getYearOfMfg());

                                 dtrs.put(dtr);
                             }
                             structure.put("dtrs",dtrs);


                             runOnUiThread(new Runnable() {
                                 @Override
                                 public void run() {
                                     apptrolsProgressDialog.setProgressText("Creating structure...");
                                 }
                             });


                             new ApiServices().saveDTRStructure(context, LoginSdk.getInsatnce().getToken(context), LoginSdk.getInsatnce().getApiKey(context), structure.toString(), new AsyncRequestExecutor.ExecuteListener() {
                                 @Override
                                 public void onStart() {

                                 }

                                 @Override
                                 public void onSuccess(String response) {
                                     if (response != null) {
                                         RxdResponse rxdResponse = RxdResponse.getFromResponseBean(response);
                                         if (rxdResponse != null) {
                                             if (rxdResponse.isTokenValid()) {
                                                 if (rxdResponse.isSuccess()) {
                                                     apptrolsProgressDialog.close();
                                                     InfoDialog infoDialog = InfoDialog.newInstance(rxdResponse.getMessage());

                                                     infoDialog.displayDialog(getSupportFragmentManager());
                                                     if (dtrEquipmentIds!=null&&!dtrEquipmentIds.isEmpty())
                                                     dtrEquipmentIds.clear();
                                                 } else {
                                                     apptrolsProgressDialog.close();
                                                     if (rxdResponse.getErrorCode()==45){
                                                         String msg= "The following DTR's already exists with our database, Please review carefully and take the action!\n\n";
                                                        new AlertDialog.Builder(context)
                                                                 .setTitle("Replace DTR?")
                                                                .setCancelable(false)
                                                                 .setMessage(msg+rxdResponse.getMessage())
                                                                 .setPositiveButton("Cancel",null)
                                                                 .setNegativeButton("Replace", new DialogInterface.OnClickListener() {
                                                                     @Override
                                                                     public void onClick(DialogInterface dialog, int which) {
                                                                         saveDtrStructure(true);
                                                                     }
                                                                 }).create().show();

                                                     }else {
                                                         InfoDialog infoDialog = InfoDialog.newInstance(rxdResponse.getMessage());
                                                         infoDialog.displayDialog(getSupportFragmentManager());
                                                     }
                                                 }

                                             } else {
                                                 apptrolsProgressDialog.close();
                                                 ToastManager.showMyToast(context,"Something went wrong");
                                                 // finish();
                                                 //LoginSdk.getInsatnce().logOutUser(context);
                                             }


                                         } else {
                                             apptrolsProgressDialog.close();
                                             ToastManager.showMyToast(context, "Unable to reach our server");
                                         }


                                     } else {
                                         apptrolsProgressDialog.close();
                                         ToastManager.showMyToast(context, "Unable to reach our server");
                                     }
                                 }

                                 @Override
                                 public void onFailed(Exception e, int httpErrorCode, String message) {
                                     apptrolsProgressDialog.close();
                                     ToastManager.showMyToast(context, message);
                                 }
                             });

                         } catch (JSONException e) {
                             e.printStackTrace();
                         }
                         }
                     }).start();







             }

 //above code in flutter :
 Future<void> saveDtrStructure({bool replace = false}) async {
   // Show loading dialog for image upload
   showDialog(
     context: context,
     barrierDismissible: false,
     builder: (context) => AlertDialog(
       content: Column(
         mainAxisSize: MainAxisSize.min,
         children: [
           CircularProgressIndicator(),
           SizedBox(height: 16),
           Text("Uploading Images..."),
         ],
       ),
     ),
   );

   try {
     // Create the structure object
     Map<String, dynamic> structure = {
       'replace': replace,
     };

     // Add structure-specific fields if it's a structure or substation
     if (isStructureChecked || isSsChecked) {
       structure.addAll({
         'structureCode': sapStructureCodeController.text,
         'abSwitch': selectedAbSwitch,
         'capacity': selectedCapacity,
         'landMark': landmarkController.text,
         'distributionCode': selectedDistribution,
         'distribution': selectedDistribution, // Assuming name and code are same for simplicity
         'structureType': selectedStructureType,
         'feederCode': isSsChecked ? "NA" : selected11KvFeeder,
         'feederName': isSsChecked ? "NA" : selected11KvFeeder, // Assuming name and code are same
         'hgFuseSet': selectedHgFuseSets,
         'lat': currentPosition?.latitude,
         'lon': currentPosition?.longitude,
         'loadPattern': selectedLoadPattern,
         'ltFuseSet': selectedLtFuseSets,
         'ltFuseType': selectedLtFuseType,
         'plinthType': selectedPlinthType,
         'ssCode': selected33KvSS,
         'ssName': selected33KvSS, // Assuming name and code are same
         'ssNo': "SS-${isSsChecked ? "NA" : selectedDtrStrut}",
       });
     }

     // Process each DTR
     List<Map<String, dynamic>> dtrs = [];
     for (var dtr in dtrList) {
       // Upload image first
       String? imageUrl;
       if (dtr.imagePath != null) {
         imageUrl = await uploadImage(dtr.imagePath!);
         if (imageUrl == null) {
           Navigator.pop(context); // Close loading dialog
           showError("Failed to upload image for DTR ${dtrList.indexOf(dtr) + 1}");
           return;
         }
       }

       // Create DTR object
       Map<String, dynamic> dtrData = {
         'capacity': dtr.capacity,
         'make': dtr.make,
         'makeVendorId': dtr.make, // Using make as vendor ID for simplicity
         'locationType': isStructureChecked
             ? "STRUCTURE"
             : isSpmChecked
                 ? "SPM"
                 : isSsChecked
                     ? "SUBSTATION"
                     : "STORE",
         'physicalLocationAddress': isStructureChecked
             ? "STRUCTURE"
             : selectedDtrLocation ?? "",
         'url': imageUrl,
         'phase': dtr.phase,
         'meterPhase': dtr.meterPhase,
         'chargeDate': dtr.chargeDate,
         'appVersion': "1.0.0", // Replace with actual version
         'ratio': dtr.ratio,
         'equipmentCode': dtr.equipmentNo,
         'slno': dtr.serialNo,
         'year': dtr.yearOfMfg,
       };

       // Add SPM FL if SPM is checked
       if (isSpmChecked) {
         dtrData['spmfl'] = selectedSpmShed;
       }

       dtrs.add(dtrData);
     }

     structure['dtrs'] = dtrs;

     // Update loading dialog text
     Navigator.pop(context); // Close previous dialog
     showDialog(
       context: context,
       barrierDismissible: false,
       builder: (context) => AlertDialog(
         content: Column(
           mainAxisSize: MainAxisSize.min,
           children: [
             CircularProgressIndicator(),
             SizedBox(height: 16),
             Text("Creating structure..."),
           ],
         ),
       ),
     );

     // Call API to save structure
     final response = await saveDtrStructureToApi(structure);

     // Handle response
     Navigator.pop(context); // Close loading dialog

     if (response['success']) {
       // Success case
       showDialog(
         context: context,
         builder: (context) => AlertDialog(
           title: Text("Success"),
           content: Text(response['message']),
           actions: [
             TextButton(
               onPressed: () {
                 Navigator.pop(context);
                 // Clear form or navigate back
               },
               child: Text("OK"),
             ),
           ],
         ),
       );
     } else {
       // Error case
       if (response['errorCode'] == 45) {
         // DTR already exists - show replace dialog
         showDialog(
           context: context,
           builder: (context) => AlertDialog(
             title: Text("Replace DTR?"),
             content: Text(
                 "The following DTR's already exists with our database, Please review carefully and take the action!\n\n${response['message']}"),
             actions: [
               TextButton(
                 onPressed: () => Navigator.pop(context),
                 child: Text("Cancel"),
               ),
               TextButton(
                 onPressed: () {
                   Navigator.pop(context);
                   saveDtrStructure(replace: true);
                 },
                 child: Text("Replace"),
               ),
             ],
           ),
         );
       } else {
         // Other errors
         showError(response['message']);
       }
     }
   } catch (e) {
     Navigator.pop(context); // Close loading dialog if error occurs
     showError("Failed to save structure: $e");
   }
 }

 Future<String?> uploadImage(String imagePath) async {
   try {
     // Simulate image upload - replace with actual API call
     await Future.delayed(Duration(seconds: 1));
     return "https://example.com/uploads/${DateTime.now().millisecondsSinceEpoch}.jpg";
   } catch (e) {
     return null;
   }
 }

 Future<Map<String, dynamic>> saveDtrStructureToApi(Map<String, dynamic> data) async {
   try {
     // Simulate API call - replace with actual HTTP request
     await Future.delayed(Duration(seconds: 2));

     // Simulate success response
     return {
       'success': true,
       'message': 'DTR structure saved successfully',
     };

     // Simulate error response (for testing)
     // return {
     //   'success': false,
     //   'errorCode': 45,
     //   'message': 'DTR with code EQ123456 already exists',
     // };
   } catch (e) {
     return {
       'success': false,
       'message': 'Failed to connect to server',
     };
   }
 }

 void showError(String message) {
   ScaffoldMessenger.of(context).showSnackBar(
     SnackBar(content: Text(message)),
   );
 }
